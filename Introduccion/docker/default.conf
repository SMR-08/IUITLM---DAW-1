# default.conf

# Define un bloque 'server' que actúa como un servidor virtual.
# ==> Nginx puede tener múltiples bloques 'server' para manejar diferentes dominios o subdominios.
server {
    # Escucha en el puerto 80.
    listen 80;

    # Define el nombre de dominio o la dirección IP que este servidor virtual manejará.
    # En este caso, 'localhost'.
    server_name localhost;

    # Establece el directorio raíz dentro del contenedor para este servidor virtual.
    # Nginx buscará los archivos (HTML, PHP, etc.) en este directorio.
    root /var/www/html;

    # Especifica los archivos que Nginx intentará servir como archivos de índice.
    # Si un usuario solicita el directorio raíz (por ejemplo, http://localhost/), Nginx buscará
    # primero un archivo llamado 'index.php'. Si no lo encuentra, buscará 'index.html'.
    index index.php index.html;

    # Define cómo Nginx maneja las solicitudes para diferentes ubicaciones (URLs) dentro del servidor virtual.
    # El bloque 'location /' maneja las solicitudes a la raíz del sitio web.
    location / {
        # 'try_files' intenta encontrar los archivos especificados en orden.
        #  1. $uri: Intenta encontrar un archivo o directorio que coincida exactamente con la URL solicitada.
        #  2. $uri/: Si lo anterior falla, intenta encontrar un directorio que coincida con la URL.
        #  3. /index.php?$query_string: Si ninguno de los anteriores existe, redirige la solicitud a index.php,
        #     pasando cualquier parámetro de consulta (lo que sigue al signo de interrogación en la URL).
        #     Solo si index.php actúa como un controlador frontal.
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Define cómo Nginx maneja las solicitudes de archivos PHP.
    # El bloque 'location ~ \.php$' se aplica a cualquier URL que termine en '.php'.
    location ~ \.php$ {
        # Intenta encontrar el archivo solicitado ($uri). Si no lo encuentra, devuelve un error 404.
        # Evita que Nginx intente ejecutar archivos que no deberían ser ejecutados como PHP.
        try_files $uri =404;

        # Pasa la solicitud al servidor FastCGI (PHP-FPM) que se ejecuta en el contenedor 'php-fpm' en el puerto 9000.
        # 'php-fpm' es el nombre del servicio definido en docker-compose.yml. Docker resuelve este nombre a la IP correcta.
        fastcgi_pass php-fpm:9000;

        # Especifica el archivo de índice para FastCGI (generalmente index.php).
        fastcgi_index index.php;

        # Incluye un archivo con parámetros FastCGI estándar.  Este archivo (fastcgi_params) define muchas variables
        # que son necesarias para que PHP funcione correctamente.
        include fastcgi_params;

        # Define variables FastCGI específicas.  Estas variables proporcionan información a PHP-FPM sobre la solicitud.
        # SCRIPT_FILENAME: La ruta completa al archivo PHP que se debe ejecutar.
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # PATH_INFO:  Información adicional sobre la ruta (si la hay) después del nombre del archivo PHP.
        fastcgi_param PATH_INFO $fastcgi_path_info;
        # QUERY_STRING: Los parámetros de la consulta (lo que sigue al signo de interrogación en la URL).
        fastcgi_param QUERY_STRING $query_string;
        # REQUEST_METHOD: El método HTTP utilizado (GET, POST, etc.).
        fastcgi_param REQUEST_METHOD $request_method;
        # CONTENT_TYPE: El tipo de contenido de la solicitud (por ejemplo, 'application/x-www-form-urlencoded').
        fastcgi_param CONTENT_TYPE $content_type;
        # CONTENT_LENGTH: La longitud del cuerpo de la solicitud.
        fastcgi_param CONTENT_LENGTH $content_length;
    }
}

# Define otro bloque 'server' para phpMyAdmin.
server {
    # Escucha en el puerto 80.
    listen 80;

    # Define el nombre de dominio para phpMyAdmin.  'phpmyadmin.localhost' es un nombre de dominio local
    # que debe resolverse a 127.0.0.1 (localhost).
    server_name phpmyadmin.localhost;

    # Define cómo manejar las solicitudes para phpMyAdmin.  En este caso, todas las solicitudes
    # se reenviarán al contenedor 'phpmyadmin'.
    location / {
        # Reenvía la solicitud al contenedor 'phpmyadmin' en el puerto 80.
        proxy_pass http://phpmyadmin:80;

        # Establece encabezados HTTP importantes para el proxy inverso.
        # Estos encabezados aseguran que el contenedor phpMyAdmin reciba información correcta
        # sobre la solicitud original del cliente.
        # Admito que "me inspire" de un foro para la parte de proxy.
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}