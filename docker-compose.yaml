# docker-compose.yaml
version: '3.8'
#╔═══════════════════════════════════════╗
#║  Iniciar y Construir Contenedores:    ║
#║  docker-compose up -d --build         ║
#╠═══════════════════════════════════════╣
#║  Detener Contenedores:                ║
#║  docker-compose down                  ║
#╚═══════════════════════════════════════╝
# Define los servicios (contenedores) que componen la aplicación.
services:
  # Servicio para el servidor web Nginx.
  nginx:
    container_name: nginx
    # Configuración para construir la imagen de Nginx a partir de un Dockerfile.
    build:
      context: ./Introduccion/docker  # El directorio docker es el contexto de construcción.
      dockerfile: nginx.dockerfile  # Usa el archivo renombrado 'nginx.dockerfile'.
    ports:
      - "80:80"  # Mapea el puerto 80 del host al puerto 80 del contenedor Nginx.
    networks:
      - red_www  # Conecta el contenedor Nginx a la red 'red_www'.
    depends_on:
      - php-fpm  # Asegura que el contenedor 'php-fpm' se inicie antes que Nginx.
      - angular  # Asegura que el contenedor 'angular' se inicie antes que Nginx.
      - python-api # Asegura que el contenedor 'python-api' se inicie antes que Nginx.
    volumes:
      # Monta el código fuente web. No se necesita COPY en el Dockerfile de nginx para esto.
      - ./Introduccion/docker/www:/var/www/html
      # Monta las configuraciones específicas de Nginx para las aplicaciones.
      # Asegúrate que estos archivos existen en tu host en las rutas especificadas.
      - ./Introduccion/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf # Montamos la configuración default si es necesaria.
      - ./Introduccion/docker/nginx/angular.conf:/etc/nginx/conf.d/angular.conf # Monta el fichero 'angular.conf'.
      - ./Introduccion/docker/nginx/api.conf:/etc/nginx/conf.d/api.conf # Monta la configuración para el proxy inverso de la API.

  # Servicio para PHP-FPM (FastCGI Process Manager).
  php-fpm:
    container_name: php-fpm
    build:
      context: ./Introduccion/docker
      dockerfile: php.dockerfile # Usa el archivo renombrado 'php.dockerfile'.
    networks:
      - red_www  # Conecta el contenedor PHP-FPM a la red 'red_www'.
    volumes:
      # Monta el código fuente web, compartido con Nginx.
      - ./Introduccion/docker/www:/var/www/html:cached
    working_dir: /var/www/html # Establece /var/www/html como directorio "de trabajo".

  # Servicio para la base de datos MariaDB.
  mariadb:
    container_name: mariadb
    image: mariadb:latest  # Usa la última imagen oficial de MariaDB.
    environment:
      # Variables de entorno para configurar MariaDB.
      MARIADB_ROOT_PASSWORD: mht85  # Contraseña del usuario root.
      MARIADB_DATABASE: Banco  # Nombre de la base de datos a crear.
      MARIADB_USER: mht  # Nombre del usuario de la base de datos.
      MARIADB_PASSWORD: mht  # Contraseña del usuario de la base de datos.
    networks:
      - red_www  # Conecta el contenedor MariaDB a la red 'red_www'.
    volumes:
      - mariadb_data:/var/lib/mysql  # Monta un volumen con nombre 'mariadb_data' para guardar los datos de forma persistente.
      # Monta scripts de inicialización de la BBDD.
      - ./BBDD/Banco:/docker-entrypoint-initdb.d

  # Servicio para phpMyAdmin (interfaz web para administrar MariaDB).
  phpmyadmin:
    container_name: phpmyadmin
    image: phpmyadmin:latest  # Usa la última imagen oficial de phpMyAdmin.
    ports:
      - "8080:80"  # Mapea el puerto 8080 del host al puerto 80 del contenedor phpMyAdmin.
    environment:
      # Variables de entorno para configurar phpMyAdmin.
      PMA_HOST: mariadb  # Nombre del servicio (MariaDB) al que se conectará.
      PMA_PORT: 3306  # Puerto de MariaDB.
    networks:
      - red_www  # Conecta el contenedor phpMyAdmin a la red 'red_www'.
    depends_on:
      - mariadb  # Asegura que MariaDB se inicie antes que phpMyAdmin.

  # Servicio para la aplicación Angular.
  angular:
    container_name: angular
    build:
      # El contexto es el directorio que contiene el Dockerfile y el código fuente de Angular.
      context: ./Introduccion/angular/app-test
      dockerfile: angular.dockerfile # Usa el archivo renombrado 'angular.dockerfile'.
    networks:
      - red_www
    # No necesita volumes aquí porque la build de Angular se copia dentro de la imagen
    # y Nginx accede a ella a través de la configuración montada en el servicio nginx.

  # Servicio para la API de Python.
  python-api:
    container_name: python-api
    build:
      context: ./API  # Contexto donde está el api.dockerfile y la carpeta Python.
      dockerfile: api.dockerfile # Usa el archivo renombrado 'api.dockerfile'.
    ports:
      - "5000:8000"  # Mapea el puerto 5000 del host al 8000 del contenedor (Gunicorn).
    networks:
      - red_www
    depends_on:
      - mariadb  # La API depende de MariaDB.
    environment:
      - DB_HOST=mariadb          # Nombre del servicio MariaDB (para la conexión).
      - DB_USER=mht              # Usuario de MariaDB.
      - DB_PASSWORD=mht          # Contraseña de MariaDB.
      - DB_NAME=Banco            # Nombre de la base de datos.
    volumes:
       # Monta el código fuente de la API. No se necesita COPY en el Dockerfile para esto.
      - ./API/Python:/app

# Define los volúmenes que se van a usar.
volumes:
  mariadb_data:  # Volumen persistente para los datos de MariaDB.

# Define las redes que se utilizarán.
networks:
  red_www:  # Red para la comunicación entre los contenedores.